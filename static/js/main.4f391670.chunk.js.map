{"version":3,"sources":["colors.js","components/Common/Loading.js","containers/Dev/Loadable.js","containers/Blog/Loadable.js","containers/Project/Loadable.js","containers/Contact/Loadable.js","containers/NotFound/Loadable.js","App.js","serviceWorker.js","index.js"],"names":["COLOR_YELLOW","COLOR_BLACK","Wrapper","styled","div","Loading","Dev","lazy","ContactLoadable","fallback","BlogLoadable","Project","ProjectLoadable","Contact","NotFound","NotFoundLoadable","App","basename","process","exact","from","to","path","component","Blog","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAA,oEAAO,IAAMA,EAAe,UACfC,EAAc,W,4VCG3B,IAAMC,EAAUC,IAAOC,IAAV,IAKFH,KAOII,EAJC,WACd,OAAO,kBAACH,EAAD,gCCVHI,EAAMC,gBAAK,kBAAM,gCAQRC,EANS,kBACtB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACH,EAAD,QCJEA,EAAMC,gBAAK,kBAAM,gCAQRG,EANM,kBACnB,kBAAC,WAAD,CAAUD,SAAU,kBAAC,EAAD,OAClB,kBAAC,EAAD,QCJEE,EAAUJ,gBAAK,kBAAM,gCAQZK,EANS,kBACtB,kBAAC,WAAD,CAAUH,SAAU,kBAAC,EAAD,OAClB,kBAACE,EAAD,QCJEE,EAAUN,gBAAK,kBAAM,gCAQZC,EANS,kBACtB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACI,EAAD,QCJEC,EAAWP,gBAAK,kBAAM,gCAQbQ,EANU,kBACvB,kBAAC,WAAD,CAAUN,SAAU,kBAAC,EAAD,OAClB,kBAACK,EAAD,QCiBWE,MAhBf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,eACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,SAC5B,kBAAC,IAAD,CAAOF,OAAK,EAACG,KAAK,OAAOC,UAAWjB,IACpC,kBAAC,IAAD,CAAOa,OAAK,EAACG,KAAK,QAAQC,UAAWC,IACrC,kBAAC,IAAD,CAAOL,OAAK,EAACG,KAAK,WAAWC,UAAWZ,IACxC,kBAAC,IAAD,CAAOQ,OAAK,EAACG,KAAK,WAAWC,UAAWV,IACxC,kBAAC,IAAD,CAAOS,KAAK,OAAOC,UAAWT,IAC9B,kBAAC,IAAD,CAAUM,KAAK,IAAIC,GAAG,YCNVI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f391670.chunk.js","sourcesContent":["export const COLOR_YELLOW = '#F2B331';\nexport const COLOR_BLACK = '#333333';\n","import React from 'react';\nimport styled from 'styled-components';\nimport { COLOR_BLACK } from '../../colors';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  color: ${COLOR_BLACK};\n`;\n\nconst Loading = () => {\n  return <Wrapper>Fetching page info...!</Wrapper>;\n};\n\nexport default Loading;\n","import React, { lazy, Suspense } from 'react';\nimport Loading from '../../components/Common/Loading';\n\nconst Dev = lazy(() => import('./index'));\n\nconst ContactLoadable = () => (\n  <Suspense fallback={<Loading />}>\n    <Dev />\n  </Suspense>\n);\n\nexport default ContactLoadable;\n","import React, { lazy, Suspense } from 'react';\nimport Loading from '../../components/Common/Loading';\n\nconst Dev = lazy(() => import('./index'));\n\nconst BlogLoadable = () => (\n  <Suspense fallback={<Loading />}>\n    <Dev />\n  </Suspense>\n);\n\nexport default BlogLoadable;\n","import React, { lazy, Suspense } from 'react';\nimport Loading from '../../components/Common/Loading';\n\nconst Project = lazy(() => import('./index'));\n\nconst ProjectLoadable = () => (\n  <Suspense fallback={<Loading />}>\n    <Project />\n  </Suspense>\n);\n\nexport default ProjectLoadable;\n","import React, { lazy, Suspense } from 'react';\nimport Loading from '../../components/Common/Loading';\n\nconst Contact = lazy(() => import('./index'));\n\nconst ContactLoadable = () => (\n  <Suspense fallback={<Loading />}>\n    <Contact />\n  </Suspense>\n);\n\nexport default ContactLoadable;\n","import React, { lazy, Suspense } from 'react';\nimport Loading from '../../components/Common/Loading';\n\nconst NotFound = lazy(() => import('./index'));\n\nconst NotFoundLoadable = () => (\n  <Suspense fallback={<Loading />}>\n    <NotFound />\n  </Suspense>\n);\n\nexport default NotFoundLoadable;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Dev from './containers/Dev/Loadable';\nimport Blog from './containers/Blog/Loadable';\nimport Project from './containers/Project/Loadable';\nimport Contact from './containers/Contact/Loadable';\nimport NotFound from './containers/NotFound/Loadable';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/dev\" />\n        <Route exact path=\"/dev\" component={Dev} />\n        <Route exact path=\"/blog\" component={Blog} />\n        <Route exact path=\"/project\" component={Project} />\n        <Route exact path=\"/contact\" component={Contact} />\n        <Route path=\"/404\" component={NotFound} />\n        <Redirect from=\"*\" to=\"/404\" />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}